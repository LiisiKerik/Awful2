--------------------------------------------------------------------------------------------------------------------------------
infixr 9 & = MkPair
infixl 7 * = times
infixl 6 + = add
infixr 5 ++ = cat
infixr 9 . = compose
infixr 5 : = ConstructList
infixl 4 <$> = fmap
infixl 4 <*> = ap
infixr 1 =<< = bind
data Bool = algebraic {False, True}
data Either [t :: Star, u :: Star] = algebraic {Left t, Right u}
data List [t :: Star] = algebraic {EmptyList, ConstructList t (List t)}
data Maybe [t :: Star] = algebraic {Nothing, Just t}
data Pair [t :: Star, u :: Star] = struct MkPair (fst :: t, snd :: u)
data Unit = struct MkUnit
class Applicative {f :: Functor [[Star, Star]] * Pointed [[Star]]} (ap [t :: Star, u :: Star] :: f (t -> u) -> f t -> f u)
class Bifunctor [[k, l, m]] <<Cat k, Cat l, Cat m>> {f :: k -> l -> m} (
  bimap [t :: k, u :: k, v :: l, w :: l] :: (t -> u) -> (v -> w) -> f t v -> f u w)
class Field {t :: Ring} (inverse :: t -> Maybe t)
class Finite {t :: Ord} (all :: List t)
class Functor [[k, l]] <<Cat k, Cat l>> {f :: k -> l} (fmap [t :: k, u :: k] :: (t -> u) -> f t -> f u)
class Monad [[k]] <<Cat k>> {f :: Functor [[k, k]] * Pointed [[k]]} (join [t :: Star] :: f (f t) -> f t)
class Pointed [[k]] <<Cat k>> {f :: k -> k} (return [t :: Star] :: t -> f t)
def bind [[k]] <<Cat k>> [t :: k, f :: k -> k, u :: k] <Monad [[k]] f> (g :: t -> f u) :: f t -> f u = join . fmap g
def cat [t :: Star] (x :: List t, y :: List t) :: List t = case x of {EmptyList -> y, z : a -> z : a ++ y}
def left [[k, l, m]] <<Cat k, Cat l, Cat m>> [t :: k, u :: k, f :: Bifunctor [[k, l, m]], v :: l] (
  g :: t -> u) :: f t v -> f u v =
    bimap g id
def negate [t :: Ring] (x :: t) :: t = convert -1 * x
def right [[k, l, m]] <<Cat k, Cat l, Cat m>> [
  t :: l,
  u :: l,
  f :: Bifunctor [[k, l, m]],
  v :: k] :: (t -> u) -> f v t -> f v u =
    bimap id
--------------------------------------------------------------------------------------------------------------------------------
{-
class Container{f :: Star -> Star}(
  empty[t :: Star] :: f t,
  filter[t :: Star] :: (t -> Bool) -> f t -> f t,
  size[t :: Star] :: f t -> Int)
instance Applicative{Either _}(x <*> y = case x of {Left z -> Left z, Right f -> f <$> y}, return = Right)
instance Applicative{Arrow{{Star}} _}((f <*> g) x = f x (g x), return x _ = x)
instance Applicative{List}(x <*> y = case x of {EmptyList -> List, f : z -> (f <$> y) ++ (z <*> y)}, return x = [x])
instance Applicative{Maybe}(x <*> y = case x of {Nothing -> Nothing, Just f -> f . y}, return = Just)
instance Bifunctor[[Star, Star, Star]]{Either}(bimap f g x = case x of {Left y -> Left (f y), Right y -> Right (g y)})
instance Bifunctor[[Star, Star, Star]]{Pair}(bimap f g (Mk_Pair x y) = Mk_Pair (f x) (g y))
instance Container{List}(
  empty = List,
  filter f x = case x of {EmptyList -> List, y : z -> let a = filter f z in case f y of {False -> a, True -> y : a}},
  size x = case x of {EmptyList -> 0, _ : y -> 1 + size y})
instance Container{Maybe}(
  empty = Nothing,
  filter f x = bind x (y -> case f y of {False -> Nothing, True -> x}),
  size x = case x of {Nothing -> 0, _ -> 1})
instance Field{Bool}(inverse x = case x of {False -> Nothing, True -> Just True})
instance Field{Int}(inverse x = case x of { -1 -> Just -1, 1 -> Just 1, _ -> Nothing})
instance Field{Pair t u}<Field t, Field u>(inverse (Mk_Pair x y) = Mk_Pair <$> Inverse x <*> Inverse y)
instance Finite{Bool}(list = [False, True])
instance Finite{Either t u}<Finite t, Finite u>(list = Left . list ++ Right . list)
instance Finite{Ordering}(list = [LT,  EQ,  GT])
instance Finite{Pair t u}<Finite t, Finite u>(list = Zip Mk_Pair list list)
instance Finite{Maybe T}<Finite T>(list = Nothing : Just <$> list)
instance[[k]]<<Cat k>> Functor[[k, Star]]{Arrow{{k}} _}(fmap = compose)
instance Functor[[Star, Star]]{Either _}(fmap = right)
instance Functor[[Star, Star]]{List}(fmap f x = case x of {EmptyList -> List, y : z -> f y : f <$> z})
instance Functor[[Star, Star]]{Maybe}(fmap f x = case x of {Nothing -> Nothing, Just y -> Just (f y)})
instance Functor[[Star, Star]]{Pair _}(fmap = right)
def Interleave[t :: Star](x :: List t, y :: List (List t)) :: List t =
  case y of {EmptyList -> List, z : a -> Concat z (Flatten (Concat x . a))}
def Max[t :: Star]<Ord t>(x :: t, y :: t) :: t = case compare x y of {LT -> y, _ -> x}
def Min[t :: Star]<Ord t>(x :: t, y :: t) :: t = case compare x y of {LT -> x, _ -> y}
def Minus[t :: Star]<Ring t>(x :: t, y :: t) :: t = x + Negate y
instance Monad{Either _}(bind x f = case x of {Left y -> Left y, Right y -> f y})
instance Monad{Arrow{{Star}} _}(bind f g x = g (f x) x)
instance Monad{List}(bind x f = case x of {EmptyList -> List, y : z -> Concat (f y) (z >>= f)})
instance Monad{Maybe}(bind x f = case x of {Nothing -> Nothing, Just y -> f y})
def Multiply'[F :: Star -> Star, T :: Star]<Applicative F, Ring T> :: F T -> F T -> F T = Zip Multiply
def Negate'[F :: Star -> Star, T :: Star]<Functor[[Star, Star]] F, Ring T> :: F T -> F T = fmap Negate
instance Ord{Bool}(
  compare x y = case x of {False -> case y of {False -> EQ, True -> LT}, True -> case y of {False -> GT, True -> EQ}})
instance Ord{Either t u}<Ord t, Ord u>(
  compare x y =
    case x of {
      Left z -> case y of {Left w -> compare z w, Right _ -> LT},
      Right z -> case y of {Left _ -> GT, Right w -> compare z w}})
instance Ord{List T}<Ord T>(
  compare x y =
    case x of {
      EmptyList -> case y of {EmptyList -> EQ, _ -> LT},
      z : a -> case y of {Empty_List -> GT, b : c -> compare (Mk_Pair z a) (Mk_Pair b c)}})
instance Ord{Maybe t}<Ord t>(
  compare x y =
    case x of {Nothing -> case y of {Nothing -> EQ, Just _ -> LT}, Just z -> case y of {Nothing -> GT, Just w -> compare z w}})
instance Ord{Ordering}(
  compare x y =
    case x of {
      LT -> case y of {LT -> EQ, _ -> LT},
      EQ -> case y of {LT -> GT, EQ -> EQ, GT -> LT},
      GT -> case y of {GT -> EQ, _ -> GT}})
instance Ord{Pair t u}<Ord t, Ord u>(
  compare (Mk_Pair x y) (Mk_Pair z a) = case compare x z of {LT -> LT, EQ -> compare y a, GT -> GT})
instance Ring{Bool}(add = notEqual, convert x = equal (unwrap (div x 2)) 1, multiply = min, negate = id)
instance Ring{Pair t u}<Ring t, Ring u>(
  Mk_Pair x y + Mk_Pair z a = Mk_Pair (x + z) (y + a),
  convert x = Mk_Pair (convert x) (convert x),
  Mk_Pair x y * Mk_Pair z a = Mk_Pair (x * z) (y * a),
  negate (Mk_Pair x y) = Mk_Pair (negate x) (negate y))
def add'[f :: Star -> Star, t :: Star]<Applicative f, Ring t>(x :: f t, y :: f t) :: f t = add <$> x <*> y
def brackets[t :: Star]<Writeable t>(x :: t) :: List Char =
  let Mk_Pair y z = Write_Brackets x in case z of {False -> y, True -> ["("] ++ y ++ [")"]}
def concat[t :: Star](x :: List t, y :: List t) :: List t = case x of {EmptyList -> y, z : a -> z : a ++ y}
def convert'[f :: Star -> Star, t :: Star]<Applicative f, Ring t>(x :: Int) :: f t = lift (convert x)
def equal[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {EQ -> True, _ -> False}
def flatten[F :: Star -> Star, T :: Star]<Monad F>(x :: F (F T)) :: F T = bind x id
def fromJust[t :: Star](x :: Maybe t) :: t = case x of {Nothing -> undefined, Just y -> y}
def greater[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {GT -> True, _ -> False}
def greaterOrEqual[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {LT -> False, _ -> True}
def identity[t :: Star]<Ring t> :: t = convert 1
def isIdentity[t :: Star]<Ord t, Ring t> :: t -> Bool = equal identity
def isZr[t :: Star]<Ord t, Ring t> :: t -> Bool = equal zr
def left[t :: Star, u :: Star, f :: Star -> Star -> Star, v :: Star]<Bifunctor f>(g :: t -> u) :: f t v -> f u v = bimap g id
def less[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {LT -> True, _ -> False}
def lessOrEqual[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {GT -> False, _ -> True}
def not(x :: Bool) :: Bool = case x of {False -> true, true -> False}
def notEqual[t :: Star]<Ord t>(x :: t, y :: t) :: Bool = case compare x y of {EQ -> False, _ -> true}
def right[t :: Star, u :: Star, f :: Star -> Star -> Star, v :: Star]<Bifunctor f> :: (t -> u) -> f v t -> f v u = bimap id
def zr[t :: Star]<Ring t> :: t = convert 0
-}