`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Load Standard.awf
Load Testing.awf
Def Add'_test : List (((Maybe Int * Maybe Int) * Maybe Int) * Maybe Int) =
  Test_2
    Add'
    (List (
      Mk_Pair (Mk_Pair Nothing Nothing) Nothing,
      Mk_Pair (Mk_Pair Nothing (Wrap 0)) Nothing,
      Mk_Pair (Mk_Pair (Wrap 0) Nothing) Nothing,
      Mk_Pair (Mk_Pair (Wrap -1) (Wrap -1)) (Wrap -2),
      Mk_Pair (Mk_Pair (Wrap -1) (Wrap 0)) (Wrap -1),
      Mk_Pair (Mk_Pair (Wrap -1) (Wrap 1)) (Wrap 0),
      Mk_Pair (Mk_Pair (Wrap 0) (Wrap -1)) (Wrap -1),
      Mk_Pair (Mk_Pair (Wrap 0) (Wrap 0)) (Wrap 0),
      Mk_Pair (Mk_Pair (Wrap 0) (Wrap 1)) (Wrap 1),
      Mk_Pair (Mk_Pair (Wrap 1) (Wrap -1)) (Wrap 0),
      Mk_Pair (Mk_Pair (Wrap 1) (Wrap 0)) (Wrap 1),
      Mk_Pair (Mk_Pair (Wrap 1) (Wrap 1)) (Wrap 2)))
Def Brackets_Char_test : List ((Char * List Char) * List Char) = Test_1 Write (Lift (Mk_Pair "!" (List (""", "!", """))))
Def Cat_List_test : List (((List Int * List Int) * List Int) * List Int) =
  Test_2
    Cat
    (List (
      Mk_Pair (Mk_Pair List List) List,
      Mk_Pair (Mk_Pair List (Lift 0)) (Lift 0),
      Mk_Pair (Mk_Pair (Lift 0) List) (Lift 0),
      Mk_Pair (Mk_Pair (Lift 0) (Lift 1)) (List (0, 1))))
Def Empty_List_test : Maybe (List Int * List Int) = Test_0 Empty List
Def Empty_Maybe_test : Maybe (Pair (Maybe Int) (Maybe Int)) = Test_0 Empty Nothing
Def Inverse_Logical_test : List ((Logical * Maybe Logical) * Maybe Logical) =
  Test_1 Inverse (Construct_List (Mk_Pair False Nothing) (Construct_List (Mk_Pair True (Wrap True)) List))
Def Write_Char_test : List ((Char * List Char) * List Char) =
  Test_1
    Write
    (List (
      Mk_Pair Newline (List ("N", "e", "w", "l", "i", "n", "e")),
      Mk_Pair "!" (List (""", "!", """)),
      Mk_Pair """ (List (""", """, """)),
      Mk_Pair "\" (List (""", "\", """)),
      Mk_Pair "n" (List (""", "n", """))))
Def Write_Comparison_test : List ((Comparison * List Char) * List Char) =
  Test_1 Write (List (Mk_Pair LT (List ("L", "T")), Mk_Pair EQ (List ("E", "Q")), Mk_Pair GT (List ("G", "T"))))
Def Write_Int_test : List ((Int * List Char) * List Char) = Test_1 Write (Lift (Mk_Pair 0 (Lift "0")))
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````