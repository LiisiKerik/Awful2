`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Load Standard.awf
Load Testing.awf
Def Add_Int_test : List (Pair (Pair (Pair Int Int) Int) Int) =
  Test_2
    Add
    (List (
      Mk_Pair (Mk_Pair -1 -1) -2,
      Mk_Pair (Mk_Pair -1 0) -1,
      Mk_Pair (Mk_Pair -1 1) 0,
      Mk_Pair (Mk_Pair 0 -1) -1,
      Mk_Pair (Mk_Pair 0 0) 0,
      Mk_Pair (Mk_Pair 0 1) 1,
      Mk_Pair (Mk_Pair 1 -1) 0,
      Mk_Pair (Mk_Pair 1 0) 1,
      Mk_Pair (Mk_Pair 1 1) 2))
Def Brackets_Int_test : List (Pair (Pair Int (List Char)) (List Char)) =
  Test_1 Brackets (List (Mk_Pair -1 (List ("-", "1")), Mk_Pair 0 (Lift "0")))
Def Compare_Char_test : List (Pair (Pair (Pair Char Char) Comparison) Comparison) =
  Test_2
    Compare
    (List (
      Mk_Pair (Mk_Pair "!" "!") EQ,
      Mk_Pair (Mk_Pair "!" "#") LT,
      Mk_Pair (Mk_Pair "#" "!") GT,
      Mk_Pair (Mk_Pair "#" "#") EQ))
Def Compare_Int_test : List (Pair (Pair (Pair Int Int) Comparison) Comparison) =
  Test_2
    Compare
    (List (
      Mk_Pair (Mk_Pair -1 -1) EQ,
      Mk_Pair (Mk_Pair -1 0) LT,
      Mk_Pair (Mk_Pair -1 1) LT,
      Mk_Pair (Mk_Pair 0 -1) GT,
      Mk_Pair (Mk_Pair 0 0) EQ,
      Mk_Pair (Mk_Pair 0 1) LT,
      Mk_Pair (Mk_Pair 1 -1) GT,
      Mk_Pair (Mk_Pair 1 0) GT,
      Mk_Pair (Mk_Pair 1 1) EQ))
Def Convert_Int_test : List (Pair (Pair Int Int) Int) = Test_1 Convert (Lift (Mk_Pair 0 0))
Def Div_test : List (Pair (Pair (Pair Int Int) (Maybe Int)) (Maybe Int)) =
  Test_2
    Div
    (List (
      Mk_Pair (Mk_Pair -2 -2) (Wrap 1),
      Mk_Pair (Mk_Pair -2 -1) (Wrap 2),
      Mk_Pair (Mk_Pair -2 1) (Wrap -2),
      Mk_Pair (Mk_Pair -2 2) (Wrap -1),
      Mk_Pair (Mk_Pair -1 -2) (Wrap 0),
      Mk_Pair (Mk_Pair -1 -1) (Wrap 1),
      Mk_Pair (Mk_Pair -1 1) (Wrap -1),
      Mk_Pair (Mk_Pair -1 2) (Wrap -1),
      Mk_Pair (Mk_Pair 0 -2) (Wrap 0),
      Mk_Pair (Mk_Pair 0 -1) (Wrap 0),
      Mk_Pair (Mk_Pair 0 0) Nothing,
      Mk_Pair (Mk_Pair 0 1) (Wrap 0),
      Mk_Pair (Mk_Pair 0 2) (Wrap 0),
      Mk_Pair (Mk_Pair 1 -2) (Wrap -1),
      Mk_Pair (Mk_Pair 1 -1) (Wrap -1),
      Mk_Pair (Mk_Pair 1 1) (Wrap 1),
      Mk_Pair (Mk_Pair 1 2) (Wrap 0),
      Mk_Pair (Mk_Pair 2 -2) (Wrap -1),
      Mk_Pair (Mk_Pair 2 -1) (Wrap -2),
      Mk_Pair (Mk_Pair 2 1) (Wrap 2),
      Mk_Pair (Mk_Pair 2 2) (Wrap 1)))
Def Id_test : List (Pair (Pair Int Int) Int) = Test_1 Id (Lift (Mk_Pair 0 0))
Def Mod_test : List (Pair (Pair (Pair Int Int) (Maybe Int)) (Maybe Int)) =
  Test_2
    Mod
    (List (
      Mk_Pair (Mk_Pair -2 -2) (Wrap 0),
      Mk_Pair (Mk_Pair -2 -1) (Wrap 0),
      Mk_Pair (Mk_Pair -2 1) (Wrap 0),
      Mk_Pair (Mk_Pair -2 2) (Wrap 0),
      Mk_Pair (Mk_Pair -1 -2) (Wrap -1),
      Mk_Pair (Mk_Pair -1 -1) (Wrap 0),
      Mk_Pair (Mk_Pair -1 1) (Wrap 0),
      Mk_Pair (Mk_Pair -1 2) (Wrap 1),
      Mk_Pair (Mk_Pair 0 -2) (Wrap 0),
      Mk_Pair (Mk_Pair 0 -1) (Wrap 0),
      Mk_Pair (Mk_Pair 0 0) Nothing,
      Mk_Pair (Mk_Pair 0 1) (Wrap 0),
      Mk_Pair (Mk_Pair 0 2) (Wrap 0),
      Mk_Pair (Mk_Pair 1 -2) (Wrap -1),
      Mk_Pair (Mk_Pair 1 -1) (Wrap 0),
      Mk_Pair (Mk_Pair 1 1) (Wrap 0),
      Mk_Pair (Mk_Pair 1 2) (Wrap 1),
      Mk_Pair (Mk_Pair 2 -2) (Wrap 0),
      Mk_Pair (Mk_Pair 2 -1) (Wrap 0),
      Mk_Pair (Mk_Pair 2 1) (Wrap 0),
      Mk_Pair (Mk_Pair 2 2) (Wrap 0)))
Def Multiply_Int_test : List (Pair (Pair (Pair Int Int) Int) Int) =
  Test_2
    Multiply
    (List (
      Mk_Pair (Mk_Pair -1 -1) 1,
      Mk_Pair (Mk_Pair -1 0) 0,
      Mk_Pair (Mk_Pair -1 1) -1,
      Mk_Pair (Mk_Pair 0 -1) 0,
      Mk_Pair (Mk_Pair 0 0) 0,
      Mk_Pair (Mk_Pair 0 1) 0,
      Mk_Pair (Mk_Pair 1 -1) -1,
      Mk_Pair (Mk_Pair 1 0) 0,
      Mk_Pair (Mk_Pair 1 1) 1))
Def Negate_Int_test : List (Pair (Pair Int Int) Int) = Test_1 Negate (List (Mk_Pair -1 1, Mk_Pair 0 0, Mk_Pair 1 -1))
Def Write_Brackets_Int_test : List (Pair (Pair Int (Pair (List Char) Logical)) (Pair (List Char) Logical)) =
  Test_1 Write_Brackets (List (Mk_Pair -1 (Mk_Pair (List ("-", "1")) False), Mk_Pair 0 (Mk_Pair (Lift "0") False)))
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````