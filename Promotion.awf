````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Load Algebra.awf
Load Standard.awf
Data Array'[L : List Nat, T : Star] =
  Branch L {Empty_List -> Struct Empty_Array', Construct_List N L' -> Struct Construct_Array'(Arrays : Array N (Array' L' T))}
Data Conj[L : List Star] =
  Branch L {Empty_List -> Struct Empty_Conj, Construct_List T L' -> Struct Construct_Conj(Head_Conj : T, Tail_Conj : Conj L')}
Data Disj[L : List Star] = Branch L {Construct_List T L' -> Algebraic {Left_Disj T, Right_Disj (Disj L')}}
Class Commutative_Conj{L : List Star}<Ring_Conj>
Class Field_Conj{L : List Star}<Ring_Conj>(Inverse_Conj : Conj L -> Maybe (Conj L))
Class Finite_Conj{L : List Star}<Ord_Conj>(All_Conj : List (Conj L))
Class Ord_Conj{L : List Star}(Compare_Conj : Conj L -> Conj L -> Comparison)
Class Ring_Conj{L : List Star}(
  Add_Conj : Conj L -> Conj L -> Conj L,
  Convert_Conj : Int -> Conj L,
  Multiply_Conj : Conj L -> Conj L -> Conj L,
  Negate_Conj : Conj L -> Conj L)
Class Writeable_Array'{L : List Nat}(Write_Brackets_Array'[T : Star]<Writeable T> : Array' L T -> List Char * Logical)
Class Writeable_Conj{L : List Star}(Write_Brackets_Conj : Conj L -> List Char * Logical)
Instance Commutative{Conj L}<Commutative_Conj L>
Instance Commutative_Conj{Empty_List[Star]}
Instance Commutative_Conj{Construct_List[Star] T L}<Commutative T, Commutative_Conj L>
Instance Field{Conj L}<Field_Conj L>(Inverse = Inverse_Conj)
Instance Field_Conj{Empty_List[Star]}(Inverse_Conj = Wrap)
Instance Field_Conj{Construct_List[Star] T L}<Field T, Field_Conj L>(
  Inverse_Conj x = Zip Construct_Conj (Inverse (Head_Conj x)) (Inverse (Tail_Conj x)))
Instance Finite{Conj L}<Finite_Conj L>(All = All_Conj)
Instance Finite_Conj{Empty_List[Star]}(All_Conj = Lift Empty_Conj)
Instance Finite_Conj{Construct_List[Star] T L}<Finite T, Finite_Conj L>(All_Conj = Zip Construct_Conj All All)
Instance Ord{Conj L}<Ord_Conj L>(Compare = Compare_Conj)
Instance Ord_Conj{Empty_List[Star]}(Compare_Conj _ _ = EQ)
Instance Ord_Conj{Construct_List[Star] T L}<Ord T, Ord_Conj L>(
  Compare_Conj x y = Compare (Mk_Pair (Head_Conj x) (Tail_Conj x)) (Mk_Pair (Head_Conj y) (Tail_Conj y)))
Instance Ring{Conj L}<Ring_Conj L>(Add = Add_Conj, Convert = Convert_Conj, Multiply = Multiply_Conj, Negate = Negate_Conj)
Instance Ring_Conj{Empty_List[Star]}(Add_Conj _ = Id, Convert_Conj _ = Empty_Conj, Multiply_Conj _ = Id, Negate_Conj = Id)
Instance Ring_Conj{Construct_List[Star] T L}<Ring T, Ring_Conj L>(
  Add_Conj x y = Construct_Conj (Add (Head_Conj x) (Head_Conj y)) (Add (Tail_Conj x) (Tail_Conj y)),
  Convert_Conj x = Construct_Conj (Convert x) (Convert x),
  Multiply_Conj x y = Construct_Conj (Multiply (Head_Conj x) (Head_Conj y)) (Multiply (Tail_Conj x) (Tail_Conj y)),
  Negate_Conj x = Construct_Conj (Negate (Head_Conj x)) (Negate (Tail_Conj x)))
Instance Writeable{Array' N T}<Writeable T, Writeable_Array' N>(Write_Brackets = Write_Brackets_Array')
Instance Writeable{Conj L}<Writeable_Conj L>(Write_Brackets = Write_Brackets_Conj)
Instance Writeable_Conj{Empty_List[Star]}(
  Write_Brackets_Conj _ = Mk_Pair (List ("E", "m", "p", "t", "y", "_", "T", "u", "p", "l", "e")) False)
Instance Writeable_Conj{Construct_List[Star] T L}<Writeable T, Writeable_Conj L>(
  Write_Brackets_Conj x =
    Mk_Pair
      (Write'
        (List ("C", "o", "n", "s", "t", "r", "u", "c", "t", "_", "T", "u", "p", "l", "e"))
        (List (Brackets (Head_Conj x), Brackets (Tail_Conj x))))
      True)
Instance Writeable_Array'{Empty_List[Nat]}(
  Write_Brackets_Array' _ = Mk_Pair (List ("E", "m", "p", "t", "y", "_", "A", "r", "r", "a", "y", "'")) False)
Instance Writeable_Array'{Construct_List[Nat] N L}<Writeable_Array N, Writeable_Array' L>(
  Write_Brackets_Array' x =
    Mk_Pair
      (Cat
        (List ("C", "o", "n", "s", "t", "r", "u", "c", "t", "_", "A", "r", "r", "a", "y", "'", " "))
        (Brackets (Arrays x)))
      True)
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````